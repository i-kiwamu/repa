--- ./Matrix.hs	2015-04-19 17:27:21.000000000 +0900
+++ ../../../../../../Matrix.hs	2015-04-19 17:05:18.000000000 +0900
@@ -17,6 +17,12 @@
           -- * Matrix Multiplication.
         , mmultP,      mmultS
 
+          -- * inner product between Vector
+        , dotP,        dotS
+
+          -- * Matrix-Vector Multiplication.
+        , mvmultP,     mvmultS
+
           -- * Transposition.
         , transpose2P, transpose2S
 
@@ -29,6 +35,7 @@
 import Data.Array.Repa.Unsafe           as R
 import Control.Monad
 import Control.Monad.ST.Strict
+import Data.Vector.Unboxed.Base (Unbox)
 
 
 -- Projections ----------------------------------------------------------------
@@ -84,6 +91,50 @@
 {-# NOINLINE mmultS #-}
 
 
+dotP :: (Monad m, Source r1 a, Source r2 a, Num a, Elt a, Unbox a)
+         => Array r1 DIM1 a
+         -> Array r2 DIM1 a
+         -> m a
+dotP av bv = R.sumAllP $ R.zipWith (*) av bv
+{-# NOINLINE dotP #-}
+
+
+dotS :: (Source r1 a, Source r2 a, Num a, Elt a, Unbox a)
+         => Array r1 DIM1 a
+         -> Array r2 DIM1 a
+         -> a
+dotS av bv = R.sumAllS $ R.zipWith (*) av bv
+{-# NOINLINE dotS #-}
+
+
+mvmultP :: Monad m
+           => Array U DIM2 Double
+           -> Array U DIM1 Double
+           -> m (Array U DIM1 Double)
+mvmultP arr vrr
+ = arr `deepSeqArray` vrr `deepSeqArray` (computeP $ R.map doti rs)
+ where (Z :. nr :. _) = R.extent arr
+       rs = R.fromListUnboxed (Z :. nr) [0..(nr-1)]
+       doti :: Int -> Double
+       doti r = dotS (slice arr (Any :. r :. All)) vrr
+{-# NOINLINE mvmultP #-}
+
+
+mvmultS :: Array U DIM2 Double
+           -> Array U DIM1 Double
+           -> Array U DIM1 Double
+mvmultS arr vrr
+ = arr `deepSeqArray` vrr `deepSeqArray` (runST $
+   return $ computeS $ R.map doti rs)
+ where (Z :. nr :. _) = R.extent arr
+       rs = R.fromListUnboxed (Z :. nr) [0..(nr-1)] 
+       doti :: Int -> Double
+       doti r = dotS (slice arr (Any :. r :. All)) vrr
+{-# NOINLINE mvmultS #-}
+
+
+
+
 -- Transpose ------------------------------------------------------------------
 -- | Transpose a 2D matrix, in parallel.
 transpose2P
